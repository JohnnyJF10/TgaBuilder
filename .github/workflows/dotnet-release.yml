name: Build and Release .NET 8 WPF App as Zip

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    outputs:
      tag: ${{ steps.meta.outputs.tag }}
      artifact-name: ${{ steps.meta.outputs.artifact_name }}
      last-commit-msg: ${{ steps.commit.outputs.message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Extract version and title from csproj
        id: meta
        shell: pwsh
        run: |
          [xml]$csproj = Get-Content ./TgaBuilderWpfUi/TgaBuilderWpfUi.csproj
          $title = $csproj.Project.PropertyGroup.AssemblyTitle
          $version = $csproj.Project.PropertyGroup.AssemblyVersion
          $shortVersion = ($version -split '\.')[0..2] -join '.'
          $tag = "v$shortVersion"
          $artifactName = "${title}V${shortVersion}"
          echo "tag=$tag" >> $env:GITHUB_OUTPUT
          echo "artifact_name=$artifactName" >> $env:GITHUB_OUTPUT

      - name: Get last commit message
        id: commit
        shell: pwsh
        run: |
          $msg = git log -1 --pretty=format:"%s"
          echo "message=$msg" >> $env:GITHUB_OUTPUT

      - name: Publish WPF project
        run: |
          dotnet publish ./TgaBuilderWpfUi/TgaBuilderWpfUi.csproj `
            -c Release `
            -r win-x64 `
            --self-contained false `
            /p:PublishReadyToRun=true

      - name: Remove .pdb files
        run: |
          $publishDir = "TgaBuilderWpfUi\bin\Release\net8.0-windows\win-x64\publish"
          if (Test-Path $publishDir) {
            Get-ChildItem $publishDir -Recurse -Filter *.pdb | Remove-Item -Force
          }

      - name: Zip publish folder
        run: |
          $zipName = "${{ steps.meta.outputs.artifact_name }}.zip"
          Compress-Archive -Path TgaBuilderWpfUi/bin/Release/net8.0-windows/win-x64/publish/* -DestinationPath $zipName

      - name: Upload ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.meta.outputs.artifact_name }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./artifact

      - name: Create GitHub Release (tag from csproj)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          release_name: Release ${{ needs.build.outputs.tag }}
          body: ${{ needs.build.outputs.last-commit-msg }}
          draft: false
          prerelease: false

      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/${{ needs.build.outputs.artifact-name }}.zip
          asset_name: ${{ needs.build.outputs.artifact-name }}.zip
          asset_content_type: application/zip